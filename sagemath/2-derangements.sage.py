

# This file was *autogenerated* from the file ./2-derangements.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)#!/usr/local/bin/sage

import sys

def is_2derangement(x):
    if len(Permutation(x).fixed_points()) <=_sage_const_2 :
      #if 2 not in x.cycle_type():
      return True
    else:
      return False

def is_derangement(x):  # for 3 intersecting
          if len(Permutation(x).fixed_points()) >= _sage_const_3 :
              return False
          elif len(Permutation(x).fixed_points()) == _sage_const_2 :
              if _sage_const_2  not in x.cycle_type() and _sage_const_3  not in x.cycle_type():
                return True
              else:
                return False
          elif len(Permutation(x).fixed_points()) == _sage_const_1 :
              if _sage_const_2  not in x.cycle_type() and _sage_const_3  not in x.cycle_type():
                return True
              else:
                return False
          elif len(Permutation(x).fixed_points()) == _sage_const_0 :
              if _sage_const_3  not in x.cycle_type():
                return True
              else:
                return False
          else:
              return False

def number_of_2derangements(n):
    G = SymmetricGroup(n)
    CC = G.conjugacy_classes_representatives()
    L = []
    s = _sage_const_0 
    for x in CC:
        if is_2derangement(x) == True:
            L.append(x)
    for x in L:
        s += len(G.conjugacy_class(x))
    return s

n = int(sys.argv[_sage_const_1 ])
print number_of_2derangements(n)


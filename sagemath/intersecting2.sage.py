

# This file was *autogenerated* from the file ./intersecting2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5)#!/usr/local/bin/sage

import sys,random

"""def intersecting(L):
     for i in range(len(L)):
         for j in range(len(L)):
             a = 'intersecting'

             for k in range(1,n+1):
                 if L[i](k) == L[j](k):
                     a = 'intersecting'
                     print k,
                     print L[i],L[j]
                     break
                 else:
                     print L[i](k),L[j](k)
                     a = 'not-intersecting'
             print (L[i],L[j])
             return False
     return True"""

def intersecting_family(F):
    for i in range(len(F)):
        for j in range(len(F)):
            print F[i],F[j]
            if intersecting(F[i],F[j]) == True:
                pass
            else:
                print F[i],F[j]
                return False
    return "The family is intersecting!!!"

def intersecting(x,y):
     for i in range(_sage_const_1 ,n+_sage_const_1 ):
         if x(i) == y(i):
             return True
     return False

def is_regular(F):
    N = []
    print len(F)
    for u in range(_sage_const_5 ):
        M = []
        i = random.choice(range(_sage_const_1 ,n+_sage_const_1 ))
        j = random.choice(range(_sage_const_1 ,n+_sage_const_1 ))
        for x in F:
            if x(i) == j:
                M.append(x)
        N.append([len(M),i,j])
    return N

n = int(sys.argv[_sage_const_1 ])

G = SymmetricGroup(n)
C = G.conjugacy_class([floor((n+_sage_const_1 )/_sage_const_2 )]+[_sage_const_1 ]*(n-floor((n+_sage_const_1 )/_sage_const_2 )))
print C
print is_regular(C)


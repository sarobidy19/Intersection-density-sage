
# This file was *autogenerated* from the file ./test_not_cayley.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_28 = Integer(28); _sage_const_10 = Integer(10); _sage_const_16 = Integer(16); _sage_const_15 = Integer(15); _sage_const_30 = Integer(30); _sage_const_20 = Integer(20); _sage_const_18 = Integer(18); _sage_const_26 = Integer(26); _sage_const_24 = Integer(24)#!/usr/local/bin/sage

def get_derangements(G):
    Drep = []
    D = []
    CC = G.conjugacy_classes_representatives()
    for x in CC:
        if is_derangement(G,x) == True:
            Drep.append(x)
        else:
            pass
    for x in Drep:
          D += list(G.conjugacy_class(x))
    return D
    #return filter(is_derangement,G)
def is_derangement(G,x):  # needs G to be defined beforehand
    for i in G.domain():
        if x(i) == i:
            return False
        else:
            pass
    return True

def eigenvalues_group(G):
    IRR = G.irreducible_characters()
    derangement_conjugacy_classes_representatives = []
    eigenvalues = []
    CC = G.conjugacy_classes_representatives()
    for x in CC:
        if is_derangement(G,x) == True:
            derangement_conjugacy_classes_representatives.append(x)
    for phi in IRR:
        s = _sage_const_0 
        for x in derangement_conjugacy_classes_representatives:
            s += (_sage_const_1 /phi.degree()) * ( G.conjugacy_class(x).cardinality()*phi(x) )
        eigenvalues.append(s)
    return list(eigenvalues),gap.Minimum(eigenvalues),gap.Maximum(eigenvalues)

def eigenvalues_group_and_multi(G):
    IRR = G.irreducible_characters()
    derangement_conjugacy_classes_representatives = []
    eigenvalues, multiplicity = [], []
    CC = G.conjugacy_classes_representatives()
    for x in CC:
        if is_derangement(G,x) == True:
            derangement_conjugacy_classes_representatives.append(x)
    for phi in IRR:
        s = _sage_const_0 
        for x in derangement_conjugacy_classes_representatives:
            s += (_sage_const_1 /phi.degree()) * ( G.conjugacy_class(x).cardinality()*phi(x) )
        eigenvalues.append(s)
        multiplicity.append(phi(G.identity())**_sage_const_2 )
    return eigenvalues,multiplicity

def eigenvalues_group_and_characters(G):
    IRR = G.irreducible_characters()
    derangement_conjugacy_classes_representatives = []
    eigenvalues_characters = []
    CC = G.conjugacy_classes_representatives()
    for x in CC:
        if is_derangement(G,x) == True:
            derangement_conjugacy_classes_representatives.append(x)
    for phi in IRR:
        s = _sage_const_0 
        for x in derangement_conjugacy_classes_representatives:
            s += (_sage_const_1 /phi.degree()) * ( G.conjugacy_class(x).cardinality()*phi(x) )
        eigenvalues_characters.append([s,phi.values()])
    return list(eigenvalues_characters)

def derangement_graph(G):
    D = get_derangements(G)
    X = G.cayley_graph(generators = D)
    X = Graph(X)
    return X

def test_graph(X):
    X.relabel()
    G = X.automorphism_group()
    Y = derangement_graph(G)
    independent_number = Y.independent_set(value_only = True)
    #clique_number = Y.clique_number()
    eigenvalues = list(eigenvalues_group(G))
    print "-----------------------------+"
    print "\n Independence number = ",independent_number, "\n stabilizer = ",G.stabilizer(_sage_const_1 ).order(),"\n transitive", X.is_vertex_transitive()#,"\n clique-coclique =", float(G.order()/clique_number)
    #print "ratio bound = ",ratio_bound(G)
    #return eigenvalues

def graph6_to_list():
    L = [_sage_const_10 ,_sage_const_15 ,_sage_const_16 ,_sage_const_18 ,_sage_const_20 ,_sage_const_24 ,_sage_const_26 ,_sage_const_28 ,_sage_const_30 ]
    LL = []
    for i range(len(L)):
        f = open("noncay{0}.g6".format(L[i]),"r")
        V =

